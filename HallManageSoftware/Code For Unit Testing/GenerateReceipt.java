package code;

import java.io.FileOutputStream;
import java.util.Date;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;

public class GenerateReceipt {

	/**
	 * @param args
	 */

	private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
			Font.BOLD);
	private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
			Font.NORMAL, BaseColor.RED);
	private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
			Font.BOLD);

	private static String name = "";
	private static String id = "";
	private static String filename = "";
	private static String path = "";
	static int messCharge = 0;
	static int amenityCharge = 0;
	static int roomRent = 0;
	
	
/***************Extra Code for unit test********************************/
	
	public static void main(String args[]){
		generate("Sourav","11cs30037","100","2600","700","ssReceipt","D:\\");
	}
	
	/**********************************************************************/

	public static void generate(String name, String id, String amenity,
			String messCharge, String roomRent, String filename, String path) {
		try {
			GenerateReceipt.name = name;
			GenerateReceipt.id = id;
			GenerateReceipt.amenityCharge = Integer.parseInt(amenity);
			GenerateReceipt.filename = filename;
			GenerateReceipt.path = path;
			GenerateReceipt.messCharge = Integer.parseInt(messCharge);
			GenerateReceipt.roomRent = Integer.parseInt(roomRent);
			Document document = new Document();
			PdfWriter.getInstance(document, new FileOutputStream(GenerateReceipt.path
					+ GenerateReceipt.filename + ".pdf"));
			document.open();
			// System.
			write(document);
			document.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private static void write(Document document) throws DocumentException {
		Paragraph preface = new Paragraph();
		// We add one empty line
		addEmptyLine(preface, 1);
		// Lets write a big header
		preface.add(new Paragraph("Fee Receipt", catFont));

		addEmptyLine(preface, 1);
		// Will create: Report generated by: _name, _date
		preface.add(new Paragraph("Generated at: " + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
				smallBold));
		addEmptyLine(preface, 2);

		preface.add(new Paragraph("Received From : " + name + "  id = " + id, catFont));

		addEmptyLine(preface, 1);

		preface.add(new Paragraph("Mess Charge : Rs " + messCharge + "/- only", redFont));

		addEmptyLine(preface, 1);

		preface.add(new Paragraph("Room Rent : Rs " + roomRent + "/- only", redFont));
		
		addEmptyLine(preface, 1);

		preface.add(new Paragraph("Amenity Charge : Rs " + amenityCharge + "/- only", redFont));


		document.add(preface);
		// Start a new page
		document.newPage();
	}

	private static void addEmptyLine(Paragraph paragraph, int number) {
		for (int i = 0; i < number; i++) {
			paragraph.add(new Paragraph(" "));
		}
	}

}
